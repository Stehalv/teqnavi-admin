generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  engineType = "binary"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Page {
  id            String    @id @default(cuid())
  shopId        String
  title         String
  handle        String
  isPublished   Boolean   @default(false)
  data          String    @db.Text @default("{}")  // Stores Shopify-compatible JSON
  templates     String    @db.Text @default("{}")  // Stores section templates
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  publishedAt   DateTime?
  deletedAt     DateTime?
  versions      PageVersion[]

  @@unique([shopId, handle])
  @@index([shopId])
  @@map("pages")
}

model PageVersion {
  id            String    @id @default(cuid())
  pageId        String
  version       Int
  data          String    @db.Text @default("{}")  // Stores Shopify-compatible JSON
  templates     String    @db.Text @default("{}")  // Stores section templates
  message       String?
  createdAt     DateTime  @default(now())
  createdBy     String?
  isLatest      Boolean   @default(false)
  page          Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, version])
  @@map("page_versions")
}

model SectionTemplate {
  id          String         @id @default(cuid())
  shopId      String
  name        String
  type        String        
  schema      String        @db.Text  // JSON schema for section settings
  liquid      String        @db.Text  // Liquid template code
  blocks      BlockTemplate[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([shopId, type])
  @@unique([id, shopId])
  @@index([shopId])
  @@map("section_templates")
}

model BlockTemplate {
  id                 String          @id @default(cuid())
  sectionTemplateId  String
  name               String
  type               String
  schema             String         @db.Text  // JSON schema for block settings
  liquid             String         @db.Text  // Liquid template code
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  sectionTemplate    SectionTemplate @relation(fields: [sectionTemplateId], references: [id], onDelete: Cascade)

  @@unique([sectionTemplateId, type])
  @@map("block_templates")
}
