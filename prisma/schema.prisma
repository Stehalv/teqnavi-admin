generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model enrollmentflow {
  id          String    @id @default(cuid())
  shopId      String
  name        String
  description String?
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  elements    element[]
  steps       step[]

  @@map("enrollment_flows")
}

model step {
  id        String         @id @default(cuid())
  flowId    String
  name      String
  order     Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  elements  element[]
  flow      enrollmentflow @relation(fields: [flowId], references: [id])

  @@map("steps")
}

model element {
  id        String         @id @default(uuid())
  type      String
  label     String
  config    String         @default("{}")
  order     Int
  flowId    String
  stepId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  flow      enrollmentflow @relation(fields: [flowId], references: [id], onUpdate: NoAction)
  step      step           @relation(fields: [stepId], references: [id], onUpdate: NoAction)

  @@map("elements")
}

model ThemeAsset {
  id              String             @id @default(cuid())
  shopId          String             @default("teqnavi-demo-store-1.myshopify.com")
  type            String
  name            String
  handle          String?
  content         String             @db.Text
  settings        String             @db.Text @default("{}")
  template_format String             @default("liquid")
  isActive        Boolean            @default(false)
  renderedHtml    String?            @db.Text
  html            String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  versions        ThemeAssetVersion[]

  @@unique([shopId, handle], name: "shopHandle")
  @@unique([shopId, name, type], name: "shopNameType")
  @@index([shopId])
}

model ThemeAssetVersion {
  id            String      @id @default(cuid())
  themeAssetId  String
  versionNumber Int
  content       String      @db.Text
  settings      String      @db.Text @default("{}")
  renderedHtml  String?     @db.Text
  html          String?     @db.Text
  message       String?
  createdAt     DateTime    @default(now())
  createdBy     String?
  isLatest      Boolean     @default(false)
  themeAsset    ThemeAsset  @relation(fields: [themeAssetId], references: [id], onDelete: Cascade)

  @@unique([themeAssetId, versionNumber])
  @@index([themeAssetId])
}
